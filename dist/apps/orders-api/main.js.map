{"version":3,"file":"main.js","mappings":"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","sources":["webpack://coindee/./apps/orders-api/src/app/app.ts","webpack://coindee/./apps/orders-api/src/app/engine-worker/data/engine-worker-messages.enum.ts","webpack://coindee/./apps/orders-api/src/app/engine-worker/engine-worker.service.ts","webpack://coindee/./apps/orders-api/src/app/engine-worker/engine.worker.ts","webpack://coindee/./apps/orders-api/src/app/orders/orders.router.ts","webpack://coindee/./apps/orders-api/src/app/orders/orders.service.ts","webpack://coindee/./apps/orders-api/src/app/utils/request-validator.middleware.ts","webpack://coindee/./libs/order-matching-engine/src/index.ts","webpack://coindee/./libs/order-matching-engine/src/lib/data/book-entry.interface.ts","webpack://coindee/./libs/order-matching-engine/src/lib/data/index.ts","webpack://coindee/./libs/order-matching-engine/src/lib/data/order-book.interface.ts","webpack://coindee/./libs/order-matching-engine/src/lib/engine/order-matching-engine.model.ts","webpack://coindee/./libs/order-matching-engine/src/lib/engine/order-matching-engine.service.ts","webpack://coindee/./libs/orders-api-interfaces/src/index.ts","webpack://coindee/./libs/orders-api-interfaces/src/lib/const/default-order-book-limit.const.ts","webpack://coindee/./libs/orders-api-interfaces/src/lib/enum/index.ts","webpack://coindee/./libs/orders-api-interfaces/src/lib/enum/order-type.enum.ts","webpack://coindee/./libs/orders-api-interfaces/src/lib/enum/socket-message-type.enum.ts","webpack://coindee/./libs/orders-api-interfaces/src/lib/enum/trade-symbol.enum.ts","webpack://coindee/./libs/orders-api-interfaces/src/lib/index.ts","webpack://coindee/./libs/orders-api-interfaces/src/lib/interfaces/index.ts","webpack://coindee/./libs/orders-api-interfaces/src/lib/interfaces/order.interface.ts","webpack://coindee/./libs/orders-api-interfaces/src/lib/interfaces/pagination.interface.ts","webpack://coindee/./libs/orders-api-interfaces/src/lib/interfaces/server-error.interface.ts","webpack://coindee/./libs/orders-api-interfaces/src/lib/interfaces/server-response.interface.ts","webpack://coindee/./libs/orders-api-interfaces/src/lib/interfaces/subscribe-message.interface.ts","webpack://coindee/./libs/orders-api-interfaces/src/lib/types/create-order.type.ts","webpack://coindee/./libs/orders-api-interfaces/src/lib/types/index.ts","webpack://coindee/./libs/orders-api-interfaces/src/lib/validators/order.validator.ts","webpack://coindee/external commonjs \"cors\"","webpack://coindee/external commonjs \"events\"","webpack://coindee/external commonjs \"express\"","webpack://coindee/external commonjs \"joi\"","webpack://coindee/external commonjs \"tslib\"","webpack://coindee/external commonjs \"uuid\"","webpack://coindee/external commonjs \"ws\"","webpack://coindee/external node-commonjs \"http\"","webpack://coindee/external node-commonjs \"worker_threads\"","webpack://coindee/webpack/bootstrap","webpack://coindee/./apps/orders-api/src/main.ts"],"sourcesContent":["import {\n  DEFAULT_ORDER_BOOK_LIMIT,\n  SocketMessageType,\n} from '@coindee/orders-api-interfaces';\nimport * as cors from 'cors';\nimport * as express from 'express';\nimport { createServer } from 'http';\nimport * as uuid from 'uuid';\nimport { Worker } from 'worker_threads';\nimport { Server } from 'ws';\nimport { RequestWithContext } from './data/request-with-context.interface';\nimport { WebsocketClient } from './data/websocket-client.interface';\nimport { EngineWorkerEvents } from './engine-worker/data/engine-worker-messages.enum';\n\nimport { ordersRouter } from './orders/orders.router';\nimport {\n  getOrderBookLimit,\n  getOrderBookWithLimit,\n} from './orders/orders.service';\n\n/**\n * Main thread entry point, starts order matching engine, http and websocket server\n */\nexport function main(): void {\n  const app = express();\n\n  // Middleware\n  app.use(cors({ origin: ['http://localhost:4200'] }));\n  app.use(express.json());\n\n  const server = createServer(app);\n\n  const websocketServer = new Server({ server, path: '/order-book' });\n\n  /**\n   * Keeps track of the limit of book entries requested for each client\n   */\n  const clientsLimits = new Map<string, number>();\n\n  /**\n   * When a client connects adds the requested limit of entires to a client limit dictionary\n   */\n  websocketServer.addListener(\n    'connection',\n    async (client: WebsocketClient, request) => {\n      const limit = getOrderBookLimit(request.url ?? '');\n      const id = uuid.v4();\n      client.id = id;\n      clientsLimits.set(id, limit);\n\n      client.once('close', () => {\n        clientsLimits.delete(id);\n      });\n    }\n  );\n\n  /**\n   * Starts order matching engine on worker thread\n   * note: this has to be run in a place where there is a check for the main thread check: ```main.ts```\n   */\n  const engineWorker = new Worker(__filename);\n\n  /**\n   * Set up a listener for workers thread messages\n   */\n  engineWorker.on('message', (message) => {\n    if (message.type === EngineWorkerEvents.OrderBookChange) {\n      // Notifies clients connected to websocket server that the order book has changed\n      websocketServer.clients.forEach((client: WebsocketClient) => {\n        const limit = client.id\n          ? clientsLimits.get(client.id) ?? DEFAULT_ORDER_BOOK_LIMIT\n          : DEFAULT_ORDER_BOOK_LIMIT;\n\n        return client.send(\n          JSON.stringify({\n            type: SocketMessageType.OrderBookChange,\n            payload: getOrderBookWithLimit(message.payload, limit),\n          })\n        );\n      });\n    }\n  });\n\n  /**\n   * Middleware to pass reference to the engine worker through request object\n   */\n  app.use((req: RequestWithContext, _, next) => {\n    req.engineWorker = engineWorker;\n    next();\n  });\n\n  app.use('/orders', ordersRouter);\n\n  const port = process.env.port || 3333;\n\n  server\n    .listen(port, () => console.log(`Listening on port ${port}`))\n    .on('error', (err) => {\n      console.error(err);\n      websocketServer.removeAllListeners();\n      engineWorker.removeAllListeners();\n    });\n}\n","export enum EngineWorkerEvents {\n  ProcessOrder = 'PROCESS_ORDER',\n  OrderBookChange = 'ORDER_BOOK_CHANGE',\n  GetSnapshot = 'GET_SNAPSHOT',\n}\n","import { DEFAULT_ORDER_BOOK_LIMIT } from '@coindee/orders-api-interfaces';\nimport { Worker } from 'worker_threads';\nimport { getOrderBookWithLimit } from '../orders/orders.service';\nimport { EngineWorkerEvents } from './data/engine-worker-messages.enum';\n\nexport interface GetOrderBookSnapshotOptions {\n  timeout?: number;\n  limit?: number;\n}\n\nexport function getOrderBookSnapshot(\n  engineWorker: Worker,\n  {\n    timeout = 1000,\n    limit = DEFAULT_ORDER_BOOK_LIMIT,\n  }: GetOrderBookSnapshotOptions\n) {\n  return new Promise((resolve, reject) => {\n    // timeouts if doesn't receive a message in specified time\n    const timerId = setTimeout(() => {\n      reject('timeout');\n    }, timeout);\n\n    const onMessage = (message: any) => {\n      if (message.type === EngineWorkerEvents.GetSnapshot) {\n        const orderBook = getOrderBookWithLimit(message.payload, limit);\n\n        resolve(orderBook);\n        removeListeners();\n      }\n    };\n\n    const onError = (err: Error) => {\n      reject(err);\n      removeListeners();\n    };\n\n    const onExit = (code: number) => {\n      if (code !== 0) {\n        reject(code);\n        removeListeners();\n      }\n    };\n\n    const removeListeners = () => {\n      engineWorker.removeListener('message', onMessage);\n      engineWorker.removeListener('error', onError);\n      engineWorker.removeListener('exit', onExit);\n      clearTimeout(timerId);\n    };\n\n    engineWorker.on('message', onMessage);\n\n    engineWorker.on('error', onError);\n\n    engineWorker.on('exit', onExit);\n\n    engineWorker.postMessage({ type: EngineWorkerEvents.GetSnapshot });\n  });\n}\n","import { OrderMatchingEngine } from '@coindee/order-matching-engine';\nimport { parentPort } from 'worker_threads';\nimport { EngineWorkerEvents } from './data/engine-worker-messages.enum';\n\nexport const orderMatchingEngine = new OrderMatchingEngine();\n\norderMatchingEngine.subscribe((orderBook) =>\n  parentPort?.postMessage({\n    type: EngineWorkerEvents.OrderBookChange,\n    payload: orderBook,\n  })\n);\n\nparentPort?.on('message', (message) => {\n  switch (message.type) {\n    case EngineWorkerEvents.ProcessOrder:\n      orderMatchingEngine.processOrder(message.payload);\n      break;\n\n    case EngineWorkerEvents.GetSnapshot:\n      parentPort?.postMessage({\n        type: EngineWorkerEvents.GetSnapshot,\n        payload: orderMatchingEngine.snapshot(),\n      });\n      break;\n  }\n});\n","import {\n  DEFAULT_ORDER_BOOK_LIMIT,\n  orderSchema,\n} from '@coindee/orders-api-interfaces';\nimport { Response, Router } from 'express';\nimport * as uuid from 'uuid';\nimport { Worker } from 'worker_threads';\nimport { RequestWithContext } from '../data/request-with-context.interface';\nimport { EngineWorkerEvents } from '../engine-worker/data/engine-worker-messages.enum';\nimport { getOrderBookSnapshot } from '../engine-worker/engine-worker.service';\nimport { requestValidator } from '../utils/request-validator.middleware';\n\nexport const ordersRouter = Router();\n\nordersRouter.get(\n  '/book',\n  async ({ query, engineWorker }: RequestWithContext, res: Response) => {\n    try {\n      const limit =\n        parseInt(query.limit as string, 10) || DEFAULT_ORDER_BOOK_LIMIT;\n\n      const result = await getOrderBookSnapshot(engineWorker as Worker, {\n        limit,\n      });\n\n      res.json({ result });\n    } catch (e) {\n      // add to monitoring\n      console.log(e);\n      res.status(500).json({\n        code: 500,\n        message: 'Sorry there was an error please try again later',\n      });\n    }\n  }\n);\n\nordersRouter.post(\n  '/',\n  requestValidator({ schema: orderSchema }),\n  ({ engineWorker, body }: RequestWithContext, res: Response) => {\n    engineWorker?.postMessage({\n      type: EngineWorkerEvents.ProcessOrder,\n      payload: body,\n    });\n\n    const newOrder = { id: uuid.v4(), ...body };\n\n    res.json({ result: newOrder });\n  }\n);\n","import { OrderBook } from '@coindee/order-matching-engine';\nimport { DEFAULT_ORDER_BOOK_LIMIT } from '@coindee/orders-api-interfaces';\n\n/**\n * Parses the limit of entries of order book from the url query params\n * returns a default limit when not preset\n * @param url to extract limit\n */\nexport function getOrderBookLimit(url: string): number {\n  if (!url) {\n    return DEFAULT_ORDER_BOOK_LIMIT;\n  }\n\n  const params = new URLSearchParams(url?.slice(url.indexOf('?')));\n\n  const limit =\n    parseInt(params.get('limit') ?? '', 10) || DEFAULT_ORDER_BOOK_LIMIT;\n\n  return limit;\n}\n\n/**\n * Slice the order book by a specified limit per order (asks, bids) the limit is per order type\n * ex: limit = 10 will mean 10 asks and 10 bids orders\n * @param book the order book\n * @param limit number entries we need\n */\nexport function getOrderBookWithLimit(\n  book: OrderBook,\n  limit: number\n): OrderBook {\n  const asks = book.asks.length > limit ? book.asks.slice(0, limit) : book.asks;\n\n  const bids = book.bids.length > limit ? book.bids.slice(0, limit) : book.bids;\n\n  return { asks, bids };\n}\n","import { NextFunction, Request, Response } from 'express';\nimport * as joi from 'joi';\n\nexport interface RequestValidatorParams<T = unknown> {\n  schema: joi.ObjectSchema<T>;\n  key?: string;\n  convert?: boolean;\n}\nexport function requestValidator<T>({\n  schema,\n  key = 'body',\n  convert = false,\n}: RequestValidatorParams<T>) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const { error } = schema.validate(req[key as keyof Request], {\n      convert,\n    });\n\n    if (!error) {\n      return next();\n    }\n\n    const message = error.details.map(({ message }) => message);\n    res.status(422).json({ message });\n  };\n}\n","export * from './lib/data';\nexport { OrderMatchingEngine } from './lib/engine/order-matching-engine.model';\n","export interface BookEntry {\n  price: number;\n  volume: number;\n}\n","export * from './book-entry.interface';\nexport * from './order-book.interface';\n","import { BookEntry } from './book-entry.interface';\n\nexport interface OrderBook {\n  asks: BookEntry[];\n  bids: BookEntry[];\n}\n","import { Order } from '@coindee/orders-api-interfaces';\nimport { EventEmitter } from 'events';\nimport { OrderBook } from '../data';\nimport { matchOrder } from './order-matching-engine.service';\n\nexport class OrderMatchingEngine {\n  /**\n   * Order book state\n   */\n  private readonly orderBook: OrderBook = {\n    asks: [],\n    bids: [],\n  };\n\n  /**\n   * Used to notify subscribers of a change in the order book\n   */\n  private readonly emitter = new EventEmitter();\n\n  /**\n   * Process an order against the order book\n   * @param order to be processed\n   */\n  processOrder(order: Order): void {\n    matchOrder(this.orderBook, order);\n    this.emitter.emit('orderBookChange', this.orderBook);\n  }\n\n  /**\n   * Synchronously returns a snapshot of the order book at a given point in time\n   */\n  snapshot(): OrderBook {\n    return { asks: [...this.orderBook.asks], bids: [...this.orderBook.bids] };\n  }\n\n  /**\n   * Once applied will notify of order book changes via the subscriber function\n   * @param subscriber function to be called every time the order book change\n   * @returns a clean up function that once is called will unsubscribe from the order book change\n   * not delivering anymore changes to the subscriber and releasing resources\n   */\n  subscribe(subscriber: (book: OrderBook) => void): VoidFunction {\n    this.emitter.addListener('orderBookChange', subscriber);\n\n    return () => {\n      this.emitter.removeListener('orderBookChange', subscriber);\n    };\n  }\n}\n","import { Order, OrderType } from '@coindee/orders-api-interfaces';\nimport { BookEntry, OrderBook } from '../data';\n\nexport interface InsertOrderParams {\n  book: BookEntry[];\n  order: Order;\n  start?: number;\n  end?: number;\n}\n\n/**\n * Inserts an order on the correct place depending of its price and volume\n * when there is an entry on the book that has the same price than the order\n * it adds the order volume to the entry, when there is no entry with that price\n * it adds an entry with that price and volume in the correct place to maintain the\n * entries sorted\n * NOTE: insertOrder assumes that book input containing the entries is sorted\n * @param params -\n * - book: entries to insert the order in\n * - order: order to be inserted\n * - start: for internal use\n * - end: for internal use\n */\nexport function insertOrder({\n  book,\n  order,\n  start = 0,\n  end = book.length - 1,\n}: InsertOrderParams): void {\n  // didn't find it start is the index where to insert it\n  if (start > end) {\n    book.splice(start, 0, { price: order.price, volume: order.volume });\n    return;\n  }\n\n  const mid = Math.floor((start + end) / 2);\n\n  const entry = book[mid];\n\n  // found the same price\n  if (entry.price === order.price) {\n    entry.volume = entry.volume + order.volume;\n    return;\n  }\n\n  // go left\n  if (\n    order.type === OrderType.Ask\n      ? entry.price > order.price\n      : entry.price < order.price\n  ) {\n    return insertOrder({ book, order, start, end: mid - 1 });\n  }\n\n  // go right\n  if (\n    order.type === OrderType.Ask\n      ? entry.price < order.price\n      : entry.price > order.price\n  ) {\n    return insertOrder({ book, order, start: mid + 1, end });\n  }\n}\n\n/**\n * Determines whether an order match based on its price, type and volume\n * orders match to an entry when an asking price is smaller or equal that a entry (bid) price\n * a biding price is bigger or equal that a entry (ask) price\n * @param order to test against entry\n * @param entry to test against order\n */\nexport function isOrderMatch(order: Order, entry: BookEntry): boolean {\n  if (order.volume <= 0) {\n    return false;\n  }\n\n  return order.type === OrderType.Ask\n    ? order.price <= entry.price\n    : order.price >= entry.price;\n}\n\nexport interface UpdateVolumeParams {\n  entries: BookEntry[];\n  order: Order;\n  index?: number;\n  floatingPoints?: number;\n}\n\n/**\n * Given a set of entries and an order will update the entries volume\n * till the order price match and volume is positive, when the whole entry volume\n * is consumed the entry will be removed, when is partially consumed will update\n * the volume accordingly\n * @param params -\n * - entries: to match against order when order (when order type is ask entries should be the list of bids and vice versa)\n * - order: to be match\n * - index: for internal use\n * - floatingPoints: number of floating points to fix the volume\n */\nexport function updateVolume({\n  entries,\n  order,\n  index = 0,\n  floatingPoints = 8,\n}: UpdateVolumeParams): number {\n  // base case: has gone over all entries or there is no match\n  if (index >= entries.length || !isOrderMatch(order, entries[index])) {\n    return order.volume;\n  }\n\n  const delta = entries[index].volume - order.volume;\n  const fixedDelta = parseFloat(delta.toFixed(floatingPoints));\n  // order has been match completely and there is still volume on the entry\n  if (fixedDelta > 0) {\n    entries[index].volume = fixedDelta;\n    order.volume = 0;\n    return order.volume;\n  }\n\n  // remove entry because all volume has been consumed\n  entries.splice(index, 1);\n\n  // set order new volume to delta absolute\n  order.volume = Math.abs(fixedDelta);\n\n  // there is no need to increment index because we had remove the current element at that index\n  // so recursion will execute with the following one\n  // example: [{ price: 58.500, volume: 0.02 }, { price: 57.600, volume: 0.01 }]\n  // removing element with price: 58.500 at index 0 will place element with price: 57.600 at index 0\n  return updateVolume({ entries, order, index, floatingPoints });\n}\n\n/**\n * Matches an order depending on its type to an order book, an order book is compose by the accumulated volume of asks (selling) orders and bids (buying) orders by price,\n * where the best asking price is the lowest price in the asks and the best selling price is the highest price in the bids.\n * orders are match depending its price and volume as following:\n * when an order is processed a match will mean that a bid order price is bigger or equal to a set of asking orders or an ask price is smaller or equal to a set of biding orders\n * in this case the book orders volume will be depleted till the order volume is 0, when an entry volume is depleted in its totality it will be removed from the set.\n * when an order doesn't match or its volume couldn't be consume in its totality will be placed in the opposite side with the price and the remaining volume.\n * NOTE: ASSUMES THAT ASKS ORDERS ARE SORTED ASCENDING AND BIDS ORDERS ARE SORTED IN DESCENDING DEPENDING ON ITS PRICE\n * @param orderBook: to match orders against\n * @param order: to match order book against\n */\nexport function matchOrder(orderBook: OrderBook, order: Order): void {\n  const scanKey = order.type == OrderType.Ask ? 'bids' : 'asks';\n\n  const remainingVolume = updateVolume({ entries: orderBook[scanKey], order });\n\n  // we have match order volume total against order book\n  if (remainingVolume <= 0) {\n    return;\n  }\n\n  const insertionKey = order.type == OrderType.Ask ? 'asks' : 'bids';\n\n  // adds to volume when same price or insert in correct position to maintain array sorted\n  insertOrder({ book: orderBook[insertionKey], order });\n}\n","export * from './lib';\n","export const DEFAULT_ORDER_BOOK_LIMIT = 20;\n","export * from './order-type.enum';\nexport * from './socket-message-type.enum';\nexport * from './trade-symbol.enum';\n","export enum OrderType {\n  Ask = 'ASK',\n  Bid = 'BID',\n}\n","export enum SocketMessageType {\n  Subscribe = 'SUBSCRIBE',\n  OrderBookChange = 'ORDER_BOOK_CHANGE',\n}\n","export enum TradeSymbol {\n  BTC = 'BTC',\n}\n","export * from './const/default-order-book-limit.const';\nexport * from './enum';\nexport * from './interfaces';\nexport * from './types';\nexport * from './validators/order.validator';\n","export * from './order.interface';\nexport * from './pagination.interface';\nexport * from './server-error.interface';\nexport * from './server-response.interface';\nexport * from './subscribe-message.interface';\n","import { OrderType } from '../enum/order-type.enum';\nimport { TradeSymbol } from '../enum/trade-symbol.enum';\n\nexport interface Order {\n  price: number;\n  volume: number;\n  symbol: TradeSymbol;\n  type: OrderType;\n}\n","export interface Pagination {\n  limit: number;\n  offset: number;\n}\n","export interface ServerError {\n  code: number;\n  message: string;\n}\n","export interface ServerResponse<TResult = unknown> {\n  result: TResult;\n}\n","import { SocketMessageType, TradeSymbol } from '../enum';\n\nexport interface SocketSubscribe {\n  type: SocketMessageType.Subscribe;\n  symbol: TradeSymbol;\n}\n","import { Order } from '../interfaces';\n\nexport type CreateOrder = Omit<Order, 'id'>;\n","export * from './create-order.type';\n","import * as joi from 'joi';\nimport { OrderType, TradeSymbol } from '../enum';\n\nconst TRADE_SYMBOLS = Object.values(TradeSymbol);\n\nconst ORDER_TYPES = Object.values(OrderType);\n\nexport const orderSchema = joi.object().keys({\n  price: joi.number().greater(0).precision(2).required(),\n  volume: joi.number().greater(0).precision(8).required(),\n  symbol: joi\n    .any()\n    .allow(...TRADE_SYMBOLS)\n    .required(),\n  type: joi\n    .any()\n    .allow(...ORDER_TYPES)\n    .required(),\n});\n","module.exports = require(\"cors\");","module.exports = require(\"events\");","module.exports = require(\"express\");","module.exports = require(\"joi\");","module.exports = require(\"tslib\");","module.exports = require(\"uuid\");","module.exports = require(\"ws\");","module.exports = require(\"http\");","module.exports = require(\"worker_threads\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { isMainThread } from 'worker_threads';\n\nasync function init() {\n  try {\n    if (isMainThread) {\n      const { main } = await import('./app/app');\n      main();\n    } else {\n      await import('./app/engine-worker/engine.worker');\n    }\n  } catch (e) {\n    // todo add monitoring\n    console.log(e);\n  }\n}\n\ninit();\n"],"names":[],"sourceRoot":""}